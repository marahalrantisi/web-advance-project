{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-node-project-final\\\\react-node-project\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { authService } from '../services/authService';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check auth status on app load\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        if (!token) {\n          setLoading(false);\n          return;\n        }\n\n        // Verify token\n        const response = await authService.getCurrentUser();\n        if (response.user) {\n          setUser(response.user);\n        }\n      } catch (err) {\n        console.error('Error checking auth status:', err);\n        // Clear local data on error\n        sessionStorage.removeItem('token');\n        sessionStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n\n  // Sign in\n  const login = async (email, password, rememberMe) => {\n    try {\n      setError(null);\n      const response = await authService.signin({\n        email,\n        password\n      });\n      if (response.token) {\n        sessionStorage.setItem('token', response.token);\n        const userData = await authService.getCurrentUser();\n        setUser(userData.user);\n        sessionStorage.setItem('user', JSON.stringify(userData.user));\n        if (rememberMe) {\n          localStorage.setItem('authData', JSON.stringify({\n            email,\n            password\n          }));\n        }\n        return true;\n      } else {\n        setError('Invalid response from server');\n        return false;\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to sign in');\n      return false;\n    }\n  };\n\n  // Sign up\n  const register = async userData => {\n    try {\n      setError(null);\n      const response = await authService.signup(userData);\n      return true;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error signing up:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Sign up failed');\n      return false;\n    }\n  };\n\n  // Sign out\n  const logout = async () => {\n    try {\n      await authService.signout();\n    } catch (err) {\n      console.error('Error signing out:', err);\n    } finally {\n      sessionStorage.removeItem('token');\n      sessionStorage.removeItem('user');\n      setUser(null);\n    }\n  };\n\n  // Update user data\n  const updateUser = updatedUser => {\n    sessionStorage.setItem('user', JSON.stringify(updatedUser));\n    setUser(updatedUser);\n  };\n\n  // Context values\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper hook to use auth context\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","checkAuthStatus","token","sessionStorage","getItem","response","getCurrentUser","err","console","removeItem","login","email","password","rememberMe","signin","setItem","userData","JSON","stringify","localStorage","_error$response","_error$response$data","data","message","register","signup","_err$response","_err$response$data","logout","signout","updateUser","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/react-node-project-final/react-node-project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { authService } from '../services/authService';\n\n// Create auth context\nconst AuthContext = createContext();\n\n// Auth provider\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check auth status on app load\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const token = sessionStorage.getItem('token');\n        \n        if (!token) {\n          setLoading(false);\n          return;\n        }\n        \n        // Verify token\n        const response = await authService.getCurrentUser();\n        \n        if (response.user) {\n          setUser(response.user);\n        }\n      } catch (err) {\n        console.error('Error checking auth status:', err);\n        // Clear local data on error\n        sessionStorage.removeItem('token');\n        sessionStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkAuthStatus();\n  }, []);\n\n  // Sign in\n  const login = async (email, password, rememberMe) => {\n    try {\n      setError(null);\n      const response = await authService.signin({ email, password });\n      \n      if (response.token) {\n        sessionStorage.setItem('token', response.token);\n        const userData = await authService.getCurrentUser();\n        setUser(userData.user);\n        sessionStorage.setItem('user', JSON.stringify(userData.user));\n        \n        if (rememberMe) {\n          localStorage.setItem('authData', JSON.stringify({ email, password }));\n        }\n        return true;\n      } else {\n        setError('Invalid response from server');\n        return false;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      setError(error.response?.data?.message || 'Failed to sign in');\n      return false;\n    }\n  };\n\n  // Sign up\n  const register = async (userData) => {\n    try {\n      setError(null);\n      const response = await authService.signup(userData);\n      return true;\n    } catch (err) {\n      console.error('Error signing up:', err);\n      setError(err.response?.data?.message || 'Sign up failed');\n      return false;\n    }\n  };\n\n  // Sign out\n  const logout = async () => {\n    try {\n      await authService.signout();\n    } catch (err) {\n      console.error('Error signing out:', err);\n    } finally {\n      sessionStorage.removeItem('token');\n      sessionStorage.removeItem('user');\n      setUser(null);\n    }\n  };\n\n  // Update user data\n  const updateUser = (updatedUser) => {\n    sessionStorage.setItem('user', JSON.stringify(updatedUser));\n    setUser(updatedUser);\n  };\n\n  // Context values\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Helper hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}