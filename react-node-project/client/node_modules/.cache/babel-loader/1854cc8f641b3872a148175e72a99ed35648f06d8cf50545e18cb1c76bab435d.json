{"ast":null,"code":"import api from './api';\nexport const authService = {\n  // Sign up\n  signup: async userData => {\n    try {\n      const response = await api.post('/auth/signup', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Error signing up:', error);\n      throw error;\n    }\n  },\n  // Sign in\n  signin: async credentials => {\n    try {\n      // Ensure credentials are properly formatted\n      const formattedCredentials = {\n        email: credentials.email.trim(),\n        password: credentials.password\n      };\n      const response = await api.post('/auth/signin', formattedCredentials);\n      if (!response.data || !response.data.token) {\n        throw new Error('Invalid response from server');\n      }\n\n      // Store token immediately after successful signin\n      sessionStorage.setItem('token', response.data.token);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response2;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        throw new Error('Invalid email or password');\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 400) {\n        throw new Error(error.response.data.message || 'Invalid credentials');\n      }\n      console.error('Error signing in:', error);\n      throw error;\n    }\n  },\n  // Sign out\n  signout: async () => {\n    try {\n      const response = await api.post('/auth/signout');\n      return response.data;\n    } catch (error) {\n      console.error('Error signing out:', error);\n      throw error;\n    }\n  },\n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","authService","signup","userData","response","post","data","error","console","signin","credentials","formattedCredentials","email","trim","password","token","Error","sessionStorage","setItem","_error$response","_error$response2","status","message","signout","getCurrentUser","get"],"sources":["D:/react-node-project-final/react-node-project/client/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const authService = {\r\n  // Sign up\r\n  signup: async (userData) => {\r\n    try {\r\n      const response = await api.post('/auth/signup', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error signing up:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Sign in\r\n  signin: async (credentials) => {\r\n    try {\r\n      // Ensure credentials are properly formatted\r\n      const formattedCredentials = {\r\n        email: credentials.email.trim(),\r\n        password: credentials.password\r\n      };\r\n\r\n      const response = await api.post('/auth/signin', formattedCredentials);\r\n      \r\n      if (!response.data || !response.data.token) {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n\r\n      // Store token immediately after successful signin\r\n      sessionStorage.setItem('token', response.data.token);\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.response?.status === 401) {\r\n        throw new Error('Invalid email or password');\r\n      } else if (error.response?.status === 400) {\r\n        throw new Error(error.response.data.message || 'Invalid credentials');\r\n      }\r\n      console.error('Error signing in:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Sign out\r\n  signout: async () => {\r\n    try {\r\n      const response = await api.post('/auth/signout');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error signing out:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get current user\r\n  getCurrentUser: async () => {\r\n    try {\r\n      const response = await api.get('/auth/me');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error getting current user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,MAAM,EAAE,MAAOC,QAAQ,IAAK;IAC1B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,cAAc,EAAEF,QAAQ,CAAC;MACzD,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,MAAM,EAAE,MAAOC,WAAW,IAAK;IAC7B,IAAI;MACF;MACA,MAAMC,oBAAoB,GAAG;QAC3BC,KAAK,EAAEF,WAAW,CAACE,KAAK,CAACC,IAAI,CAAC,CAAC;QAC/BC,QAAQ,EAAEJ,WAAW,CAACI;MACxB,CAAC;MAED,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,cAAc,EAAEM,oBAAoB,CAAC;MAErE,IAAI,CAACP,QAAQ,CAACE,IAAI,IAAI,CAACF,QAAQ,CAACE,IAAI,CAACS,KAAK,EAAE;QAC1C,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;;MAEA;MACAC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEd,QAAQ,CAACE,IAAI,CAACS,KAAK,CAAC;MAEpD,OAAOX,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAY,eAAA,EAAAC,gBAAA;MACd,IAAI,EAAAD,eAAA,GAAAZ,KAAK,CAACH,QAAQ,cAAAe,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;QAClC,MAAM,IAAIL,KAAK,CAAC,2BAA2B,CAAC;MAC9C,CAAC,MAAM,IAAI,EAAAI,gBAAA,GAAAb,KAAK,CAACH,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;QACzC,MAAM,IAAIL,KAAK,CAACT,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACgB,OAAO,IAAI,qBAAqB,CAAC;MACvE;MACAd,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAgB,OAAO,EAAE,MAAAA,CAAA,KAAY;IACnB,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,eAAe,CAAC;MAChD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAiB,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMJ,GAAG,CAACyB,GAAG,CAAC,UAAU,CAAC;MAC1C,OAAOrB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}