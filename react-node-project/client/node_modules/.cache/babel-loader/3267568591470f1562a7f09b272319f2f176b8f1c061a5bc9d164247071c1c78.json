{"ast":null,"code":"\"use client\";\n\n// src/radio-group.tsx\nimport _objectSpread from \"D:/react-node-project-final/react-node-project/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"D:/react-node-project-final/react-node-project/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"__scopeRadio\", \"name\", \"checked\", \"required\", \"disabled\", \"value\", \"onCheck\", \"form\"],\n  _excluded2 = [\"__scopeRadio\", \"forceMount\"],\n  _excluded3 = [\"__scopeRadio\", \"control\", \"checked\", \"bubbles\"],\n  _excluded4 = [\"__scopeRadioGroup\", \"name\", \"defaultValue\", \"value\", \"required\", \"disabled\", \"orientation\", \"dir\", \"loop\", \"onValueChange\"],\n  _excluded5 = [\"__scopeRadioGroup\", \"disabled\"],\n  _excluded6 = [\"__scopeRadioGroup\"];\nimport * as React2 from \"react\";\nimport { composeEventHandlers as composeEventHandlers2 } from \"@radix-ui/primitive\";\nimport { useComposedRefs as useComposedRefs2 } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope as createContextScope2 } from \"@radix-ui/react-context\";\nimport { Primitive as Primitive2 } from \"@radix-ui/react-primitive\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useDirection } from \"@radix-ui/react-direction\";\n\n// src/radio.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar RADIO_NAME = \"Radio\";\nvar [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);\nvar [RadioProvider, useRadioContext] = createRadioContext(RADIO_NAME);\nvar Radio = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeRadio,\n      name,\n      checked = false,\n      required,\n      disabled,\n      value = \"on\",\n      onCheck,\n      form\n    } = props,\n    radioProps = _objectWithoutProperties(props, _excluded);\n  const [button, setButton] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setButton(node));\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = button ? form || !!button.closest(\"form\") : true;\n  return /* @__PURE__ */jsxs(RadioProvider, {\n    scope: __scopeRadio,\n    checked,\n    disabled,\n    children: [/* @__PURE__ */jsx(Primitive.button, _objectSpread(_objectSpread({\n      type: \"button\",\n      role: \"radio\",\n      \"aria-checked\": checked,\n      \"data-state\": getState(checked),\n      \"data-disabled\": disabled ? \"\" : void 0,\n      disabled,\n      value\n    }, radioProps), {}, {\n      ref: composedRefs,\n      onClick: composeEventHandlers(props.onClick, event => {\n        if (!checked) onCheck === null || onCheck === void 0 || onCheck();\n        if (isFormControl) {\n          hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n          if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n        }\n      })\n    })), isFormControl && /* @__PURE__ */jsx(RadioBubbleInput, {\n      control: button,\n      bubbles: !hasConsumerStoppedPropagationRef.current,\n      name,\n      value,\n      checked,\n      required,\n      disabled,\n      form,\n      style: {\n        transform: \"translateX(-100%)\"\n      }\n    })]\n  });\n});\nRadio.displayName = RADIO_NAME;\nvar INDICATOR_NAME = \"RadioIndicator\";\nvar RadioIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeRadio,\n      forceMount\n    } = props,\n    indicatorProps = _objectWithoutProperties(props, _excluded2);\n  const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.checked,\n    children: /* @__PURE__ */jsx(Primitive.span, _objectSpread(_objectSpread({\n      \"data-state\": getState(context.checked),\n      \"data-disabled\": context.disabled ? \"\" : void 0\n    }, indicatorProps), {}, {\n      ref: forwardedRef\n    }))\n  });\n});\nRadioIndicator.displayName = INDICATOR_NAME;\nvar BUBBLE_INPUT_NAME = \"RadioBubbleInput\";\nvar RadioBubbleInput = React.forwardRef((_ref, forwardedRef) => {\n  let {\n      __scopeRadio,\n      control,\n      checked,\n      bubbles = true\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded3);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(ref, forwardedRef);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n  React.useEffect(() => {\n    const input = ref.current;\n    if (!input) return;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event(\"click\", {\n        bubbles\n      });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n  return /* @__PURE__ */jsx(Primitive.input, _objectSpread(_objectSpread({\n    type: \"radio\",\n    \"aria-hidden\": true,\n    defaultChecked: checked\n  }, props), {}, {\n    tabIndex: -1,\n    ref: composedRefs,\n    style: _objectSpread(_objectSpread(_objectSpread({}, props.style), controlSize), {}, {\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      opacity: 0,\n      margin: 0\n    })\n  }));\n});\nRadioBubbleInput.displayName = BUBBLE_INPUT_NAME;\nfunction getState(checked) {\n  return checked ? \"checked\" : \"unchecked\";\n}\n\n// src/radio-group.tsx\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar ARROW_KEYS = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\nvar RADIO_GROUP_NAME = \"RadioGroup\";\nvar [createRadioGroupContext, createRadioGroupScope] = createContextScope2(RADIO_GROUP_NAME, [createRovingFocusGroupScope, createRadioScope]);\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar useRadioScope = createRadioScope();\nvar [RadioGroupProvider, useRadioGroupContext] = createRadioGroupContext(RADIO_GROUP_NAME);\nvar RadioGroup = React2.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeRadioGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange\n    } = props,\n    groupProps = _objectWithoutProperties(props, _excluded4);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n  const direction = useDirection(dir);\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue !== null && defaultValue !== void 0 ? defaultValue : null,\n    onChange: onValueChange,\n    caller: RADIO_GROUP_NAME\n  });\n  return /* @__PURE__ */jsx2(RadioGroupProvider, {\n    scope: __scopeRadioGroup,\n    name,\n    required,\n    disabled,\n    value,\n    onValueChange: setValue,\n    children: /* @__PURE__ */jsx2(RovingFocusGroup.Root, _objectSpread(_objectSpread({\n      asChild: true\n    }, rovingFocusGroupScope), {}, {\n      orientation,\n      dir: direction,\n      loop,\n      children: /* @__PURE__ */jsx2(Primitive2.div, _objectSpread(_objectSpread({\n        role: \"radiogroup\",\n        \"aria-required\": required,\n        \"aria-orientation\": orientation,\n        \"data-disabled\": disabled ? \"\" : void 0,\n        dir: direction\n      }, groupProps), {}, {\n        ref: forwardedRef\n      }))\n    }))\n  });\n});\nRadioGroup.displayName = RADIO_GROUP_NAME;\nvar ITEM_NAME = \"RadioGroupItem\";\nvar RadioGroupItem = React2.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeRadioGroup,\n      disabled\n    } = props,\n    itemProps = _objectWithoutProperties(props, _excluded5);\n  const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n  const isDisabled = context.disabled || disabled;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n  const radioScope = useRadioScope(__scopeRadioGroup);\n  const ref = React2.useRef(null);\n  const composedRefs = useComposedRefs2(forwardedRef, ref);\n  const checked = context.value === itemProps.value;\n  const isArrowKeyPressedRef = React2.useRef(false);\n  React2.useEffect(() => {\n    const handleKeyDown = event => {\n      if (ARROW_KEYS.includes(event.key)) {\n        isArrowKeyPressedRef.current = true;\n      }\n    };\n    const handleKeyUp = () => isArrowKeyPressedRef.current = false;\n    document.addEventListener(\"keydown\", handleKeyDown);\n    document.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n      document.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n  return /* @__PURE__ */jsx2(RovingFocusGroup.Item, _objectSpread(_objectSpread({\n    asChild: true\n  }, rovingFocusGroupScope), {}, {\n    focusable: !isDisabled,\n    active: checked,\n    children: /* @__PURE__ */jsx2(Radio, _objectSpread(_objectSpread(_objectSpread({\n      disabled: isDisabled,\n      required: context.required,\n      checked\n    }, radioScope), itemProps), {}, {\n      name: context.name,\n      ref: composedRefs,\n      onCheck: () => context.onValueChange(itemProps.value),\n      onKeyDown: composeEventHandlers2(event => {\n        if (event.key === \"Enter\") event.preventDefault();\n      }),\n      onFocus: composeEventHandlers2(itemProps.onFocus, () => {\n        var _ref$current;\n        if (isArrowKeyPressedRef.current) (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.click();\n      })\n    }))\n  }));\n});\nRadioGroupItem.displayName = ITEM_NAME;\nvar INDICATOR_NAME2 = \"RadioGroupIndicator\";\nvar RadioGroupIndicator = React2.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeRadioGroup\n    } = props,\n    indicatorProps = _objectWithoutProperties(props, _excluded6);\n  const radioScope = useRadioScope(__scopeRadioGroup);\n  return /* @__PURE__ */jsx2(RadioIndicator, _objectSpread(_objectSpread(_objectSpread({}, radioScope), indicatorProps), {}, {\n    ref: forwardedRef\n  }));\n});\nRadioGroupIndicator.displayName = INDICATOR_NAME2;\nvar Root2 = RadioGroup;\nvar Item2 = RadioGroupItem;\nvar Indicator = RadioGroupIndicator;\nexport { Indicator, Item2 as Item, RadioGroup, RadioGroupIndicator, RadioGroupItem, Root2 as Root, createRadioGroupScope };","map":{"version":3,"names":["React2","composeEventHandlers","composeEventHandlers2","useComposedRefs","useComposedRefs2","createContextScope","createContextScope2","Primitive","Primitive2","RovingFocusGroup","createRovingFocusGroupScope","useControllableState","useDirection","React","useSize","usePrevious","Presence","jsx","jsxs","RADIO_NAME","createRadioContext","createRadioScope","RadioProvider","useRadioContext","Radio","forwardRef","props","forwardedRef","__scopeRadio","name","checked","required","disabled","value","onCheck","form","radioProps","_objectWithoutProperties","_excluded","button","setButton","useState","composedRefs","node","hasConsumerStoppedPropagationRef","useRef","isFormControl","closest","scope","children","_objectSpread","type","role","getState","ref","onClick","event","current","isPropagationStopped","stopPropagation","RadioBubbleInput","control","bubbles","style","transform","displayName","INDICATOR_NAME","RadioIndicator","forceMount","indicatorProps","_excluded2","context","present","span","BUBBLE_INPUT_NAME","_ref","_excluded3","prevChecked","controlSize","useEffect","input","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","setChecked","set","Event","call","dispatchEvent","defaultChecked","tabIndex","position","pointerEvents","opacity","margin","jsx2","ARROW_KEYS","RADIO_GROUP_NAME","createRadioGroupContext","createRadioGroupScope","useRovingFocusGroupScope","useRadioScope","RadioGroupProvider","useRadioGroupContext","RadioGroup","__scopeRadioGroup","defaultValue","valueProp","orientation","dir","loop","onValueChange","groupProps","_excluded4","rovingFocusGroupScope","direction","setValue","prop","defaultProp","onChange","caller","Root","asChild","div","ITEM_NAME","RadioGroupItem","itemProps","_excluded5","isDisabled","radioScope","isArrowKeyPressedRef","handleKeyDown","includes","key","handleKeyUp","document","addEventListener","removeEventListener","Item","focusable","active","onKeyDown","preventDefault","onFocus","_ref$current","click","INDICATOR_NAME2","RadioGroupIndicator","_excluded6","Root2","Item2","Indicator"],"sources":["D:\\react-node-project-final\\react-node-project\\client\\node_modules\\@radix-ui\\react-radio-group\\src\\radio-group.tsx","D:\\react-node-project-final\\react-node-project\\client\\node_modules\\@radix-ui\\react-radio-group\\src\\radio.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Radio, RadioIndicator, createRadioScope } from './radio';\n\nimport type { Scope } from '@radix-ui/react-context';\n\nconst ARROW_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroup\n * -----------------------------------------------------------------------------------------------*/\nconst RADIO_GROUP_NAME = 'RadioGroup';\n\ntype ScopedProps<P> = P & { __scopeRadioGroup?: Scope };\nconst [createRadioGroupContext, createRadioGroupScope] = createContextScope(RADIO_GROUP_NAME, [\n  createRovingFocusGroupScope,\n  createRadioScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useRadioScope = createRadioScope();\n\ntype RadioGroupContextValue = {\n  name?: string;\n  required: boolean;\n  disabled: boolean;\n  value: string | null;\n  onValueChange(value: string): void;\n};\n\nconst [RadioGroupProvider, useRadioGroupContext] =\n  createRadioGroupContext<RadioGroupContextValue>(RADIO_GROUP_NAME);\n\ntype RadioGroupElement = React.ComponentRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface RadioGroupProps extends PrimitiveDivProps {\n  name?: RadioGroupContextValue['name'];\n  required?: React.ComponentPropsWithoutRef<typeof Radio>['required'];\n  disabled?: React.ComponentPropsWithoutRef<typeof Radio>['disabled'];\n  dir?: RovingFocusGroupProps['dir'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  defaultValue?: string;\n  value?: string | null;\n  onValueChange?: RadioGroupContextValue['onValueChange'];\n}\n\nconst RadioGroup = React.forwardRef<RadioGroupElement, RadioGroupProps>(\n  (props: ScopedProps<RadioGroupProps>, forwardedRef) => {\n    const {\n      __scopeRadioGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange,\n      ...groupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const direction = useDirection(dir);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue ?? null,\n      onChange: onValueChange as (value: string | null) => void,\n      caller: RADIO_GROUP_NAME,\n    });\n\n    return (\n      <RadioGroupProvider\n        scope={__scopeRadioGroup}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={value}\n        onValueChange={setValue}\n      >\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"radiogroup\"\n            aria-required={required}\n            aria-orientation={orientation}\n            data-disabled={disabled ? '' : undefined}\n            dir={direction}\n            {...groupProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </RadioGroupProvider>\n    );\n  }\n);\n\nRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'RadioGroupItem';\n\ntype RadioGroupItemElement = React.ComponentRef<typeof Radio>;\ntype RadioProps = React.ComponentPropsWithoutRef<typeof Radio>;\ninterface RadioGroupItemProps extends Omit<RadioProps, 'onCheck' | 'name'> {\n  value: string;\n}\n\nconst RadioGroupItem = React.forwardRef<RadioGroupItemElement, RadioGroupItemProps>(\n  (props: ScopedProps<RadioGroupItemProps>, forwardedRef) => {\n    const { __scopeRadioGroup, disabled, ...itemProps } = props;\n    const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n    const isDisabled = context.disabled || disabled;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    const ref = React.useRef<React.ComponentRef<typeof Radio>>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const checked = context.value === itemProps.value;\n    const isArrowKeyPressedRef = React.useRef(false);\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (ARROW_KEYS.includes(event.key)) {\n          isArrowKeyPressedRef.current = true;\n        }\n      };\n      const handleKeyUp = () => (isArrowKeyPressedRef.current = false);\n      document.addEventListener('keydown', handleKeyDown);\n      document.addEventListener('keyup', handleKeyUp);\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown);\n        document.removeEventListener('keyup', handleKeyUp);\n      };\n    }, []);\n\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!isDisabled}\n        active={checked}\n      >\n        <Radio\n          disabled={isDisabled}\n          required={context.required}\n          checked={checked}\n          {...radioScope}\n          {...itemProps}\n          name={context.name}\n          ref={composedRefs}\n          onCheck={() => context.onValueChange(itemProps.value)}\n          onKeyDown={composeEventHandlers((event) => {\n            // According to WAI ARIA, radio groups don't activate items on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onFocus={composeEventHandlers(itemProps.onFocus, () => {\n            /**\n             * Our `RovingFocusGroup` will focus the radio when navigating with arrow keys\n             * and we need to \"check\" it in that case. We click it to \"check\" it (instead\n             * of updating `context.value`) so that the radio change event fires.\n             */\n            if (isArrowKeyPressedRef.current) ref.current?.click();\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nRadioGroupItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioGroupIndicator';\n\ntype RadioGroupIndicatorElement = React.ComponentRef<typeof RadioIndicator>;\ntype RadioIndicatorProps = React.ComponentPropsWithoutRef<typeof RadioIndicator>;\ninterface RadioGroupIndicatorProps extends RadioIndicatorProps {}\n\nconst RadioGroupIndicator = React.forwardRef<RadioGroupIndicatorElement, RadioGroupIndicatorProps>(\n  (props: ScopedProps<RadioGroupIndicatorProps>, forwardedRef) => {\n    const { __scopeRadioGroup, ...indicatorProps } = props;\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    return <RadioIndicator {...radioScope} {...indicatorProps} ref={forwardedRef} />;\n  }\n);\n\nRadioGroupIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = RadioGroup;\nconst Item = RadioGroupItem;\nconst Indicator = RadioGroupIndicator;\n\nexport {\n  createRadioGroupScope,\n  //\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n};\nexport type { RadioGroupProps, RadioGroupItemProps, RadioGroupIndicatorProps };\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Radio\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_NAME = 'Radio';\n\ntype ScopedProps<P> = P & { __scopeRadio?: Scope };\nconst [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);\n\ntype RadioContextValue = { checked: boolean; disabled?: boolean };\nconst [RadioProvider, useRadioContext] = createRadioContext<RadioContextValue>(RADIO_NAME);\n\ntype RadioElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface RadioProps extends PrimitiveButtonProps {\n  checked?: boolean;\n  required?: boolean;\n  onCheck?(): void;\n}\n\nconst Radio = React.forwardRef<RadioElement, RadioProps>(\n  (props: ScopedProps<RadioProps>, forwardedRef) => {\n    const {\n      __scopeRadio,\n      name,\n      checked = false,\n      required,\n      disabled,\n      value = 'on',\n      onCheck,\n      form,\n      ...radioProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? form || !!button.closest('form') : true;\n\n    return (\n      <RadioProvider scope={__scopeRadio} checked={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"radio\"\n          aria-checked={checked}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...radioProps}\n          ref={composedRefs}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            // radios cannot be unchecked so we only communicate a checked state\n            if (!checked) onCheck?.();\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if radio is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect radio updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <RadioBubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            form={form}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </RadioProvider>\n    );\n  }\n);\n\nRadio.displayName = RADIO_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioIndicator';\n\ntype RadioIndicatorElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\nexport interface RadioIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst RadioIndicator = React.forwardRef<RadioIndicatorElement, RadioIndicatorProps>(\n  (props: ScopedProps<RadioIndicatorProps>, forwardedRef) => {\n    const { __scopeRadio, forceMount, ...indicatorProps } = props;\n    const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n    return (\n      <Presence present={forceMount || context.checked}>\n        <Primitive.span\n          data-state={getState(context.checked)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nRadioIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioBubbleInput\n * -----------------------------------------------------------------------------------------------*/\n\nconst BUBBLE_INPUT_NAME = 'RadioBubbleInput';\n\ntype InputProps = React.ComponentPropsWithoutRef<typeof Primitive.input>;\ninterface RadioBubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: boolean;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst RadioBubbleInput = React.forwardRef<HTMLInputElement, RadioBubbleInputProps>(\n  (\n    {\n      __scopeRadio,\n      control,\n      checked,\n      bubbles = true,\n      ...props\n    }: ScopedProps<RadioBubbleInputProps>,\n    forwardedRef\n  ) => {\n    const ref = React.useRef<HTMLInputElement>(null);\n    const composedRefs = useComposedRefs(ref, forwardedRef);\n    const prevChecked = usePrevious(checked);\n    const controlSize = useSize(control);\n\n    // Bubble checked change to parents (e.g form change event)\n    React.useEffect(() => {\n      const input = ref.current;\n      if (!input) return;\n\n      const inputProto = window.HTMLInputElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        inputProto,\n        'checked'\n      ) as PropertyDescriptor;\n      const setChecked = descriptor.set;\n      if (prevChecked !== checked && setChecked) {\n        const event = new Event('click', { bubbles });\n        setChecked.call(input, checked);\n        input.dispatchEvent(event);\n      }\n    }, [prevChecked, checked, bubbles]);\n\n    return (\n      <Primitive.input\n        type=\"radio\"\n        aria-hidden\n        defaultChecked={checked}\n        {...props}\n        tabIndex={-1}\n        ref={composedRefs}\n        style={{\n          ...props.style,\n          ...controlSize,\n          position: 'absolute',\n          pointerEvents: 'none',\n          opacity: 0,\n          margin: 0,\n        }}\n      />\n    );\n  }\n);\n\nRadioBubbleInput.displayName = BUBBLE_INPUT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction getState(checked: boolean) {\n  return checked ? 'checked' : 'unchecked';\n}\n\nexport {\n  createRadioScope,\n  //\n  Radio,\n  RadioIndicator,\n};\nexport type { RadioProps };\n"],"mappings":";;;;;;;;;;;AAAA,YAAYA,MAAA,MAAW;AACvB,SAASC,oBAAA,IAAAC,qBAAA,QAA4B;AACrC,SAASC,eAAA,IAAAC,gBAAA,QAAuB;AAChC,SAASC,kBAAA,IAAAC,mBAAA,QAA0B;AACnC,SAASC,SAAA,IAAAC,UAAA,QAAiB;AAC1B,YAAYC,gBAAA,MAAsB;AAClC,SAASC,2BAAA,QAAmC;AAC5C,SAASC,oBAAA,QAA4B;AACrC,SAASC,YAAA,QAAoB;;;ACR7B,YAAYC,KAAA,MAAW;AACvB,SAASZ,oBAAA,QAA4B;AACrC,SAASE,eAAA,QAAuB;AAChC,SAASE,kBAAA,QAA0B;AACnC,SAASS,OAAA,QAAe;AACxB,SAASC,WAAA,QAAmB;AAC5B,SAASC,QAAA,QAAgB;AACzB,SAAST,SAAA,QAAiB;AA4CpB,SACEU,GAAA,EADFC,IAAA;AApCN,IAAMC,UAAA,GAAa;AAGnB,IAAM,CAACC,kBAAA,EAAoBC,gBAAgB,IAAIhB,kBAAA,CAAmBc,UAAU;AAG5E,IAAM,CAACG,aAAA,EAAeC,eAAe,IAAIH,kBAAA,CAAsCD,UAAU;AAUzF,IAAMK,KAAA,GAAcX,KAAA,CAAAY,UAAA,CAClB,CAACC,KAAA,EAAgCC,YAAA,KAAiB;EAChD,MAAM;MACJC,YAAA;MACAC,IAAA;MACAC,OAAA,GAAU;MACVC,QAAA;MACAC,QAAA;MACAC,KAAA,GAAQ;MACRC,OAAA;MACAC;IAEF,IAAIT,KAAA;IADCU,UAAA,GAAAC,wBAAA,CACDX,KAAA,EAAAY,SAAA;EACJ,MAAM,CAACC,MAAA,EAAQC,SAAS,IAAU3B,KAAA,CAAA4B,QAAA,CAAmC,IAAI;EACzE,MAAMC,YAAA,GAAevC,eAAA,CAAgBwB,YAAA,EAAegB,IAAA,IAASH,SAAA,CAAUG,IAAI,CAAC;EAC5E,MAAMC,gCAAA,GAAyC/B,KAAA,CAAAgC,MAAA,CAAO,KAAK;EAE3D,MAAMC,aAAA,GAAgBP,MAAA,GAASJ,IAAA,IAAQ,CAAC,CAACI,MAAA,CAAOQ,OAAA,CAAQ,MAAM,IAAI;EAElE,OACE,eAAA7B,IAAA,CAACI,aAAA;IAAc0B,KAAA,EAAOpB,YAAA;IAAcE,OAAA;IAAkBE,QAAA;IACpDiB,QAAA,kBAAAhC,GAAA,CAACV,SAAA,CAAUgC,MAAA,EAAAW,aAAA,CAAAA,aAAA;MACTC,IAAA,EAAK;MACLC,IAAA,EAAK;MACL,gBAActB,OAAA;MACd,cAAYuB,QAAA,CAASvB,OAAO;MAC5B,iBAAeE,QAAA,GAAW,KAAK;MAC/BA,QAAA;MACAC;IAAA,GACIG,UAAA;MACJkB,GAAA,EAAKZ,YAAA;MACLa,OAAA,EAAStD,oBAAA,CAAqByB,KAAA,CAAM6B,OAAA,EAAUC,KAAA,IAAU;QAEtD,IAAI,CAAC1B,OAAA,EAASI,OAAA,aAAAA,OAAA,eAAAA,OAAA,CAAU;QACxB,IAAIY,aAAA,EAAe;UACjBF,gCAAA,CAAiCa,OAAA,GAAUD,KAAA,CAAME,oBAAA,CAAqB;UAItE,IAAI,CAACd,gCAAA,CAAiCa,OAAA,EAASD,KAAA,CAAMG,eAAA,CAAgB;QACvE;MACF,CAAC;IAAA,EACH,GACCb,aAAA,IACC,eAAA7B,GAAA,CAAC2C,gBAAA;MACCC,OAAA,EAAStB,MAAA;MACTuB,OAAA,EAAS,CAAClB,gCAAA,CAAiCa,OAAA;MAC3C5B,IAAA;MACAI,KAAA;MACAH,OAAA;MACAC,QAAA;MACAC,QAAA;MACAG,IAAA;MAIA4B,KAAA,EAAO;QAAEC,SAAA,EAAW;MAAoB;IAAA,CAC1C;EAAA,CAEJ;AAEJ,CACF;AAEAxC,KAAA,CAAMyC,WAAA,GAAc9C,UAAA;AAMpB,IAAM+C,cAAA,GAAiB;AAYvB,IAAMC,cAAA,GAAuBtD,KAAA,CAAAY,UAAA,CAC3B,CAACC,KAAA,EAAyCC,YAAA,KAAiB;EACzD,MAAM;MAAEC,YAAA;MAAcwC;IAA8B,IAAI1C,KAAA;IAAnB2C,cAAA,GAAAhC,wBAAA,CAAmBX,KAAA,EAAA4C,UAAA;EACxD,MAAMC,OAAA,GAAUhD,eAAA,CAAgB2C,cAAA,EAAgBtC,YAAY;EAC5D,OACE,eAAAX,GAAA,CAACD,QAAA;IAASwD,OAAA,EAASJ,UAAA,IAAcG,OAAA,CAAQzC,OAAA;IACvCmB,QAAA,iBAAAhC,GAAA,CAACV,SAAA,CAAUkE,IAAA,EAAAvB,aAAA,CAAAA,aAAA;MACT,cAAYG,QAAA,CAASkB,OAAA,CAAQzC,OAAO;MACpC,iBAAeyC,OAAA,CAAQvC,QAAA,GAAW,KAAK;IAAA,GACnCqC,cAAA;MACJf,GAAA,EAAK3B;IAAA,EACP;EAAA,CACF;AAEJ,CACF;AAEAwC,cAAA,CAAeF,WAAA,GAAcC,cAAA;AAM7B,IAAMQ,iBAAA,GAAoB;AAS1B,IAAMd,gBAAA,GAAyB/C,KAAA,CAAAY,UAAA,CAC7B,CAAAkD,IAAA,EAQEhD,YAAA,KACG;EAAA,IARH;MACEC,YAAA;MACAiC,OAAA;MACA/B,OAAA;MACAgC,OAAA,GAAU;IAEZ,IAAAa,IAAA;IADKjD,KAAA,GAAAW,wBAAA,CAAAsC,IAAA,EAAAC,UAAA;EAIL,MAAMtB,GAAA,GAAYzC,KAAA,CAAAgC,MAAA,CAAyB,IAAI;EAC/C,MAAMH,YAAA,GAAevC,eAAA,CAAgBmD,GAAA,EAAK3B,YAAY;EACtD,MAAMkD,WAAA,GAAc9D,WAAA,CAAYe,OAAO;EACvC,MAAMgD,WAAA,GAAchE,OAAA,CAAQ+C,OAAO;EAG7BhD,KAAA,CAAAkE,SAAA,CAAU,MAAM;IACpB,MAAMC,KAAA,GAAQ1B,GAAA,CAAIG,OAAA;IAClB,IAAI,CAACuB,KAAA,EAAO;IAEZ,MAAMC,UAAA,GAAaC,MAAA,CAAOC,gBAAA,CAAiBC,SAAA;IAC3C,MAAMC,UAAA,GAAaC,MAAA,CAAOC,wBAAA,CACxBN,UAAA,EACA,SACF;IACA,MAAMO,UAAA,GAAaH,UAAA,CAAWI,GAAA;IAC9B,IAAIZ,WAAA,KAAgB/C,OAAA,IAAW0D,UAAA,EAAY;MACzC,MAAMhC,KAAA,GAAQ,IAAIkC,KAAA,CAAM,SAAS;QAAE5B;MAAQ,CAAC;MAC5C0B,UAAA,CAAWG,IAAA,CAAKX,KAAA,EAAOlD,OAAO;MAC9BkD,KAAA,CAAMY,aAAA,CAAcpC,KAAK;IAC3B;EACF,GAAG,CAACqB,WAAA,EAAa/C,OAAA,EAASgC,OAAO,CAAC;EAElC,OACE,eAAA7C,GAAA,CAACV,SAAA,CAAUyE,KAAA,EAAA9B,aAAA,CAAAA,aAAA;IACTC,IAAA,EAAK;IACL,eAAW;IACX0C,cAAA,EAAgB/D;EAAA,GACZJ,KAAA;IACJoE,QAAA,EAAU;IACVxC,GAAA,EAAKZ,YAAA;IACLqB,KAAA,EAAAb,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACKxB,KAAA,CAAMqC,KAAA,GACNe,WAAA;MACHiB,QAAA,EAAU;MACVC,aAAA,EAAe;MACfC,OAAA,EAAS;MACTC,MAAA,EAAQ;IAAA;EACV,EACF;AAEJ,CACF;AAEAtC,gBAAA,CAAiBK,WAAA,GAAcS,iBAAA;AAI/B,SAASrB,SAASvB,OAAA,EAAkB;EAClC,OAAOA,OAAA,GAAU,YAAY;AAC/B;;;ADhHU,SAAAb,GAAA,IAAAkF,IAAA;AAjFV,IAAMC,UAAA,GAAa,CAAC,WAAW,aAAa,aAAa,YAAY;AAKrE,IAAMC,gBAAA,GAAmB;AAGzB,IAAM,CAACC,uBAAA,EAAyBC,qBAAqB,IAAIjG,mBAAA,CAAmB+F,gBAAA,EAAkB,CAC5F3F,2BAAA,EACAW,gBAAA,CACD;AACD,IAAMmF,wBAAA,GAA2B9F,2BAAA,CAA4B;AAC7D,IAAM+F,aAAA,GAAgBpF,gBAAA,CAAiB;AAUvC,IAAM,CAACqF,kBAAA,EAAoBC,oBAAoB,IAC7CL,uBAAA,CAAgDD,gBAAgB;AAiBlE,IAAMO,UAAA,GAAmB5G,MAAA,CAAAyB,UAAA,CACvB,CAACC,KAAA,EAAqCC,YAAA,KAAiB;EACrD,MAAM;MACJkF,iBAAA;MACAhF,IAAA;MACAiF,YAAA;MACA7E,KAAA,EAAO8E,SAAA;MACPhF,QAAA,GAAW;MACXC,QAAA,GAAW;MACXgF,WAAA;MACAC,GAAA;MACAC,IAAA,GAAO;MACPC;IAEF,IAAIzF,KAAA;IADC0F,UAAA,GAAA/E,wBAAA,CACDX,KAAA,EAAA2F,UAAA;EACJ,MAAMC,qBAAA,GAAwBd,wBAAA,CAAyBK,iBAAiB;EACxE,MAAMU,SAAA,GAAY3G,YAAA,CAAaqG,GAAG;EAClC,MAAM,CAAChF,KAAA,EAAOuF,QAAQ,IAAI7G,oBAAA,CAAqB;IAC7C8G,IAAA,EAAMV,SAAA;IACNW,WAAA,EAAaZ,YAAA,aAAAA,YAAA,cAAAA,YAAA,GAAgB;IAC7Ba,QAAA,EAAUR,aAAA;IACVS,MAAA,EAAQvB;EACV,CAAC;EAED,OACE,eAAAF,IAAA,CAACO,kBAAA;IACC1D,KAAA,EAAO6D,iBAAA;IACPhF,IAAA;IACAE,QAAA;IACAC,QAAA;IACAC,KAAA;IACAkF,aAAA,EAAeK,QAAA;IAEfvE,QAAA,iBAAAkD,IAAA,CAAkB1F,gBAAA,CAAAoH,IAAA,EAAA3E,aAAA,CAAAA,aAAA;MAChB4E,OAAA,EAAO;IAAA,GACHR,qBAAA;MACJN,WAAA;MACAC,GAAA,EAAKM,SAAA;MACLL,IAAA;MAEAjE,QAAA,iBAAAkD,IAAA,CAAC3F,UAAA,CAAUuH,GAAA,EAAA7E,aAAA,CAAAA,aAAA;QACTE,IAAA,EAAK;QACL,iBAAerB,QAAA;QACf,oBAAkBiF,WAAA;QAClB,iBAAehF,QAAA,GAAW,KAAK;QAC/BiF,GAAA,EAAKM;MAAA,GACDH,UAAA;QACJ9D,GAAA,EAAK3B;MAAA,EACP;IAAA,EACF;EAAA,CACF;AAEJ,CACF;AAEAiF,UAAA,CAAW3C,WAAA,GAAcoC,gBAAA;AAMzB,IAAM2B,SAAA,GAAY;AAQlB,IAAMC,cAAA,GAAuBjI,MAAA,CAAAyB,UAAA,CAC3B,CAACC,KAAA,EAAyCC,YAAA,KAAiB;EACzD,MAAM;MAAEkF,iBAAA;MAAmB7E;IAAuB,IAAIN,KAAA;IAAdwG,SAAA,GAAA7F,wBAAA,CAAcX,KAAA,EAAAyG,UAAA;EACtD,MAAM5D,OAAA,GAAUoC,oBAAA,CAAqBqB,SAAA,EAAWnB,iBAAiB;EACjE,MAAMuB,UAAA,GAAa7D,OAAA,CAAQvC,QAAA,IAAYA,QAAA;EACvC,MAAMsF,qBAAA,GAAwBd,wBAAA,CAAyBK,iBAAiB;EACxE,MAAMwB,UAAA,GAAa5B,aAAA,CAAcI,iBAAiB;EAClD,MAAMvD,GAAA,GAAYtD,MAAA,CAAA6C,MAAA,CAAyC,IAAI;EAC/D,MAAMH,YAAA,GAAetC,gBAAA,CAAgBuB,YAAA,EAAc2B,GAAG;EACtD,MAAMxB,OAAA,GAAUyC,OAAA,CAAQtC,KAAA,KAAUiG,SAAA,CAAUjG,KAAA;EAC5C,MAAMqG,oBAAA,GAA6BtI,MAAA,CAAA6C,MAAA,CAAO,KAAK;EAEzC7C,MAAA,CAAA+E,SAAA,CAAU,MAAM;IACpB,MAAMwD,aAAA,GAAiB/E,KAAA,IAAyB;MAC9C,IAAI4C,UAAA,CAAWoC,QAAA,CAAShF,KAAA,CAAMiF,GAAG,GAAG;QAClCH,oBAAA,CAAqB7E,OAAA,GAAU;MACjC;IACF;IACA,MAAMiF,WAAA,GAAcA,CAAA,KAAOJ,oBAAA,CAAqB7E,OAAA,GAAU;IAC1DkF,QAAA,CAASC,gBAAA,CAAiB,WAAWL,aAAa;IAClDI,QAAA,CAASC,gBAAA,CAAiB,SAASF,WAAW;IAC9C,OAAO,MAAM;MACXC,QAAA,CAASE,mBAAA,CAAoB,WAAWN,aAAa;MACrDI,QAAA,CAASE,mBAAA,CAAoB,SAASH,WAAW;IACnD;EACF,GAAG,EAAE;EAEL,OACE,eAAAvC,IAAA,CAAkB1F,gBAAA,CAAAqI,IAAA,EAAA5F,aAAA,CAAAA,aAAA;IAChB4E,OAAA,EAAO;EAAA,GACHR,qBAAA;IACJyB,SAAA,EAAW,CAACX,UAAA;IACZY,MAAA,EAAQlH,OAAA;IAERmB,QAAA,iBAAAkD,IAAA,CAAC3E,KAAA,EAAA0B,aAAA,CAAAA,aAAA,CAAAA,aAAA;MACClB,QAAA,EAAUoG,UAAA;MACVrG,QAAA,EAAUwC,OAAA,CAAQxC,QAAA;MAClBD;IAAA,GACIuG,UAAA,GACAH,SAAA;MACJrG,IAAA,EAAM0C,OAAA,CAAQ1C,IAAA;MACdyB,GAAA,EAAKZ,YAAA;MACLR,OAAA,EAASA,CAAA,KAAMqC,OAAA,CAAQ4C,aAAA,CAAce,SAAA,CAAUjG,KAAK;MACpDgH,SAAA,EAAW/I,qBAAA,CAAsBsD,KAAA,IAAU;QAEzC,IAAIA,KAAA,CAAMiF,GAAA,KAAQ,SAASjF,KAAA,CAAM0F,cAAA,CAAe;MAClD,CAAC;MACDC,OAAA,EAASjJ,qBAAA,CAAqBgI,SAAA,CAAUiB,OAAA,EAAS,MAAM;QAAA,IAAAC,YAAA;QAMrD,IAAId,oBAAA,CAAqB7E,OAAA,EAAS,CAAA2F,YAAA,GAAA9F,GAAA,CAAIG,OAAA,cAAA2F,YAAA,eAAJA,YAAA,CAAaC,KAAA,CAAM;MACvD,CAAC;IAAA,EACH;EAAA,EACF;AAEJ,CACF;AAEApB,cAAA,CAAehE,WAAA,GAAc+D,SAAA;AAM7B,IAAMsB,eAAA,GAAiB;AAMvB,IAAMC,mBAAA,GAA4BvJ,MAAA,CAAAyB,UAAA,CAChC,CAACC,KAAA,EAA8CC,YAAA,KAAiB;EAC9D,MAAM;MAAEkF;IAAqC,IAAInF,KAAA;IAAnB2C,cAAA,GAAAhC,wBAAA,CAAmBX,KAAA,EAAA8H,UAAA;EACjD,MAAMnB,UAAA,GAAa5B,aAAA,CAAcI,iBAAiB;EAClD,OAAO,eAAAV,IAAA,CAAChC,cAAA,EAAAjB,aAAA,CAAAA,aAAA,CAAAA,aAAA,KAAmBmF,UAAA,GAAgBhE,cAAA;IAAgBf,GAAA,EAAK3B;EAAA,EAAc;AAChF,CACF;AAEA4H,mBAAA,CAAoBtF,WAAA,GAAcqF,eAAA;AAIlC,IAAMG,KAAA,GAAO7C,UAAA;AACb,IAAM8C,KAAA,GAAOzB,cAAA;AACb,IAAM0B,SAAA,GAAYJ,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}