{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-node-project-final\\\\react-node-project\\\\client\\\\src\\\\pages\\\\StudentDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, Outlet } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport DashboardLayout from '../components/dashboard-layout';\nimport { CheckCircle } from 'lucide-react';\nimport Chart from 'chart.js/auto';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentDashboard = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    user: currentUser\n  } = useAuth();\n  const [users, setUsers] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const [studentProjects, setStudentProjects] = useState([]);\n  const [taskFilters, setTaskFilters] = useState({\n    status: [],\n    assigneeId: '',\n    startDate: null,\n    endDate: null,\n    searchTerm: '',\n    sortBy: 'createdAt',\n    sortOrder: 'desc'\n  });\n\n  // Chart refs\n  const statusChartRef = useRef(null);\n  const projectsChartRef = useRef(null);\n  const timelineChartRef = useRef(null);\n  const statusChartInstance = useRef(null);\n  const projectsChartInstance = useRef(null);\n  const timelineChartInstance = useRef(null);\n  useEffect(() => {\n    if (!currentUser) {\n      navigate('/signin');\n      return;\n    }\n    if (currentUser.role !== 'student') {\n      navigate('/dashboard');\n      return;\n    }\n    fetchUsers();\n    fetchTasks();\n    fetchProjects();\n  }, [currentUser, navigate]);\n  useEffect(() => {\n    if (!currentUser) return;\n\n    // First filter tasks assigned to this student\n    const studentTasks = tasks.filter(task => task.assignedTo === currentUser.id);\n\n    // Then apply additional filters\n    let result = [...studentTasks];\n\n    // Filter by status\n    if (taskFilters.status.length > 0) {\n      result = result.filter(task => taskFilters.status.includes(task.status));\n    }\n\n    // Filter by date range\n    if (taskFilters.startDate) {\n      result = result.filter(task => new Date(task.createdAt) >= taskFilters.startDate);\n    }\n    if (taskFilters.endDate) {\n      const endDate = new Date(taskFilters.endDate);\n      endDate.setDate(endDate.getDate() + 1);\n      result = result.filter(task => new Date(task.createdAt) <= endDate);\n    }\n\n    // Filter by search term\n    if (taskFilters.searchTerm) {\n      const searchLower = taskFilters.searchTerm.toLowerCase();\n      result = result.filter(task => task.title.toLowerCase().includes(searchLower) || task.description.toLowerCase().includes(searchLower));\n    }\n\n    // Sort results\n    result.sort((a, b) => {\n      let valueA, valueB;\n      if (taskFilters.sortBy === 'createdAt') {\n        valueA = new Date(a.createdAt).getTime();\n        valueB = new Date(b.createdAt).getTime();\n      } else if (taskFilters.sortBy === 'title') {\n        valueA = a.title.toLowerCase();\n        valueB = b.title.toLowerCase();\n      } else if (taskFilters.sortBy === 'status') {\n        valueA = a.status;\n        valueB = b.status;\n      } else {\n        valueA = a[taskFilters.sortBy];\n        valueB = b[taskFilters.sortBy];\n      }\n      return taskFilters.sortOrder === 'asc' ? valueA > valueB ? 1 : valueA < valueB ? -1 : 0 : valueA < valueB ? 1 : valueA > valueB ? -1 : 0;\n    });\n    setFilteredTasks(result);\n\n    // Initialize charts\n    initializeCharts(studentTasks, studentProjects);\n  }, [tasks, taskFilters, currentUser, studentProjects]);\n  useEffect(() => {\n    fetchProjects();\n  }, [fetchProjects]);\n  useEffect(() => {\n    initializeCharts();\n  }, [initializeCharts]);\n  const fetchUsers = async () => {\n    try {\n      const response = await api.get('/users');\n      setUsers(response.data);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const fetchTasks = async () => {\n    try {\n      const response = await api.get('/tasks');\n      setTasks(response.data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  const fetchProjects = async () => {\n    try {\n      const response = await api.get('/projects');\n      const allProjects = response.data;\n      setProjects(allProjects);\n      const userProjects = allProjects.filter(project => project.students.includes(currentUser.id));\n      setStudentProjects(userProjects);\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n    }\n  };\n  const initializeCharts = (studentTasks, studentProjects) => {\n    initializeStatusChart(studentTasks);\n    initializeProjectsChart(studentProjects);\n    initializeTimelineChart(studentTasks);\n  };\n  const initializeStatusChart = studentTasks => {\n    if (statusChartRef.current) {\n      if (statusChartInstance.current) {\n        statusChartInstance.current.destroy();\n      }\n      const pendingCount = studentTasks.filter(task => task.status === 'pending').length;\n      const inProgressCount = studentTasks.filter(task => task.status === 'in-progress').length;\n      const completedCount = studentTasks.filter(task => task.status === 'completed').length;\n      const ctx = statusChartRef.current.getContext('2d');\n      if (ctx) {\n        statusChartInstance.current = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: ['Pending', 'In Progress', 'Completed'],\n            datasets: [{\n              data: [pendingCount, inProgressCount, completedCount],\n              backgroundColor: ['rgba(255, 193, 7, 0.7)', 'rgba(13, 110, 253, 0.7)', 'rgba(40, 167, 69, 0.7)'],\n              borderColor: ['rgba(255, 193, 7, 1)', 'rgba(13, 110, 253, 1)', 'rgba(40, 167, 69, 1)'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: 'rgba(255, 255, 255, 0.7)'\n                }\n              },\n              title: {\n                display: true,\n                text: 'Task Status Distribution',\n                color: 'rgba(255, 255, 255, 0.9)',\n                font: {\n                  size: 16\n                }\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  const initializeProjectsChart = studentProjects => {\n    if (projectsChartRef.current && studentProjects.length > 0) {\n      if (projectsChartInstance.current) {\n        projectsChartInstance.current.destroy();\n      }\n      const ctx = projectsChartRef.current.getContext('2d');\n      if (ctx) {\n        projectsChartInstance.current = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: studentProjects.map(project => project.title),\n            datasets: [{\n              label: 'Project Progress (%)',\n              data: studentProjects.map(project => project.progress),\n              backgroundColor: studentProjects.map(project => {\n                if (project.status === 'completed') return 'rgba(40, 167, 69, 0.7)';\n                if (project.status === 'in-progress') return 'rgba(13, 110, 253, 0.7)';\n                return 'rgba(255, 193, 7, 0.7)';\n              }),\n              borderColor: studentProjects.map(project => {\n                if (project.status === 'completed') return 'rgba(40, 167, 69, 1)';\n                if (project.status === 'in-progress') return 'rgba(13, 110, 253, 1)';\n                return 'rgba(255, 193, 7, 1)';\n              }),\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  color: 'rgba(255, 255, 255, 0.7)'\n                },\n                grid: {\n                  color: 'rgba(255, 255, 255, 0.1)'\n                }\n              },\n              x: {\n                ticks: {\n                  color: 'rgba(255, 255, 255, 0.7)',\n                  callback: function (value) {\n                    const label = this.getLabelForValue(value);\n                    if (label.length > 15) {\n                      return label.substring(0, 15) + '...';\n                    }\n                    return label;\n                  }\n                },\n                grid: {\n                  color: 'rgba(255, 255, 255, 0.1)'\n                }\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              },\n              title: {\n                display: true,\n                text: 'My Projects Progress',\n                color: 'rgba(255, 255, 255, 0.9)',\n                font: {\n                  size: 16\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: context => {\n                    const project = studentProjects[context.dataIndex];\n                    return [`Progress: ${context.parsed.y}%`, `Status: ${project.status}`, `Due: ${project.endDate}`];\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  const initializeTimelineChart = studentTasks => {\n    if (timelineChartRef.current) {\n      if (timelineChartInstance.current) {\n        timelineChartInstance.current.destroy();\n      }\n      const tasksByMonth = {};\n      const completedByMonth = {};\n      const months = [];\n      const now = new Date();\n      for (let i = 5; i >= 0; i--) {\n        const month = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        const monthKey = `${month.getFullYear()}-${month.getMonth() + 1}`;\n        months.push(monthKey);\n        tasksByMonth[monthKey] = 0;\n        completedByMonth[monthKey] = 0;\n      }\n      studentTasks.forEach(task => {\n        const taskDate = new Date(task.createdAt);\n        const monthKey = `${taskDate.getFullYear()}-${taskDate.getMonth() + 1}`;\n        if (tasksByMonth[monthKey] !== undefined) {\n          tasksByMonth[monthKey]++;\n          if (task.status === 'completed') {\n            completedByMonth[monthKey]++;\n          }\n        }\n      });\n      const ctx = timelineChartRef.current.getContext('2d');\n      if (ctx) {\n        timelineChartInstance.current = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: months.map(month => {\n              const [year, monthNum] = month.split('-');\n              return `${new Date(parseInt(year), parseInt(monthNum) - 1).toLocaleString('default', {\n                month: 'short'\n              })} ${year}`;\n            }),\n            datasets: [{\n              label: 'Total Tasks',\n              data: months.map(month => tasksByMonth[month]),\n              borderColor: 'rgba(54, 162, 235, 1)',\n              backgroundColor: 'rgba(54, 162, 235, 0.2)',\n              tension: 0.3,\n              fill: true\n            }, {\n              label: 'Completed Tasks',\n              data: months.map(month => completedByMonth[month]),\n              borderColor: 'rgba(75, 192, 192, 1)',\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              tension: 0.3,\n              fill: true\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: 'rgba(255, 255, 255, 0.7)',\n                  precision: 0\n                },\n                grid: {\n                  color: 'rgba(255, 255, 255, 0.1)'\n                }\n              },\n              x: {\n                ticks: {\n                  color: 'rgba(255, 255, 255, 0.7)'\n                },\n                grid: {\n                  color: 'rgba(255, 255, 255, 0.1)'\n                }\n              }\n            },\n            plugins: {\n              legend: {\n                labels: {\n                  color: 'rgba(255, 255, 255, 0.7)'\n                }\n              },\n              title: {\n                display: true,\n                text: 'Task Timeline (Last 6 Months)',\n                color: 'rgba(255, 255, 255, 0.9)',\n                font: {\n                  size: 16\n                }\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  const handleUpdateTaskStatus = async (taskId, status) => {\n    try {\n      await api.put(`/tasks/${taskId}`, {\n        status\n      });\n      const updatedTasks = tasks.map(task => task.id === taskId ? {\n        ...task,\n        status\n      } : task);\n      setTasks(updatedTasks);\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n  const getAdminName = id => {\n    const admin = users.find(user => user.id === id);\n    return admin ? admin.name : 'Unknown Admin';\n  };\n  const getStatusBadge = status => {\n    const badgeColors = {\n      pending: 'bg-yellow-900/20 text-yellow-400 border-yellow-500',\n      'in-progress': 'bg-blue-900/20 text-blue-400 border-blue-500',\n      completed: 'bg-green-900/20 text-green-400 border-green-500'\n    };\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `px-2 py-1 rounded-full border text-sm ${badgeColors[status]}`,\n      children: status.replace('-', ' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this);\n  };\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n  };\n  return /*#__PURE__*/_jsxDEV(DashboardLayout, {\n    title: \"Student Dashboard\",\n    userRole: \"student\",\n    children: /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 5\n  }, this);\n};\n_s(StudentDashboard, \"IoUTE7mqpzU9Pv8UKI85J7mqrBg=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = StudentDashboard;\nexport default StudentDashboard;\nvar _c;\n$RefreshReg$(_c, \"StudentDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","Outlet","useAuth","DashboardLayout","CheckCircle","Chart","api","jsxDEV","_jsxDEV","StudentDashboard","_s","navigate","user","currentUser","users","setUsers","tasks","setTasks","projects","setProjects","filteredTasks","setFilteredTasks","studentProjects","setStudentProjects","taskFilters","setTaskFilters","status","assigneeId","startDate","endDate","searchTerm","sortBy","sortOrder","statusChartRef","projectsChartRef","timelineChartRef","statusChartInstance","projectsChartInstance","timelineChartInstance","role","fetchUsers","fetchTasks","fetchProjects","studentTasks","filter","task","assignedTo","id","result","length","includes","Date","createdAt","setDate","getDate","searchLower","toLowerCase","title","description","sort","a","b","valueA","valueB","getTime","initializeCharts","response","get","data","error","console","allProjects","userProjects","project","students","initializeStatusChart","initializeProjectsChart","initializeTimelineChart","current","destroy","pendingCount","inProgressCount","completedCount","ctx","getContext","type","labels","datasets","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","color","display","text","font","size","map","label","progress","scales","y","beginAtZero","max","ticks","grid","x","callback","value","getLabelForValue","substring","tooltip","callbacks","context","dataIndex","parsed","tasksByMonth","completedByMonth","months","now","i","month","getFullYear","getMonth","monthKey","push","forEach","taskDate","undefined","year","monthNum","split","parseInt","toLocaleString","tension","fill","precision","handleUpdateTaskStatus","taskId","put","updatedTasks","getAdminName","admin","find","name","getStatusBadge","badgeColors","pending","completed","className","children","replace","fileName","_jsxFileName","lineNumber","columnNumber","formatDate","dateString","date","toLocaleDateString","toLocaleTimeString","userRole","_c","$RefreshReg$"],"sources":["D:/react-node-project-final/react-node-project/client/src/pages/StudentDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, Outlet } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport DashboardLayout from '../components/dashboard-layout';\nimport { CheckCircle } from 'lucide-react';\nimport Chart from 'chart.js/auto';\nimport api from '../services/api';\n\nconst StudentDashboard = () => {\n  const navigate = useNavigate();\n  const { user: currentUser } = useAuth();\n  const [users, setUsers] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const [studentProjects, setStudentProjects] = useState([]);\n  const [taskFilters, setTaskFilters] = useState({\n    status: [],\n    assigneeId: '',\n    startDate: null,\n    endDate: null,\n    searchTerm: '',\n    sortBy: 'createdAt',\n    sortOrder: 'desc',\n  });\n\n  // Chart refs\n  const statusChartRef = useRef(null);\n  const projectsChartRef = useRef(null);\n  const timelineChartRef = useRef(null);\n  const statusChartInstance = useRef(null);\n  const projectsChartInstance = useRef(null);\n  const timelineChartInstance = useRef(null);\n\n  useEffect(() => {\n    if (!currentUser) {\n      navigate('/signin');\n      return;\n    }\n\n    if (currentUser.role !== 'student') {\n      navigate('/dashboard');\n      return;\n    }\n\n    fetchUsers();\n    fetchTasks();\n    fetchProjects();\n  }, [currentUser, navigate]);\n\n  useEffect(() => {\n    if (!currentUser) return;\n\n    // First filter tasks assigned to this student\n    const studentTasks = tasks.filter((task) => task.assignedTo === currentUser.id);\n\n    // Then apply additional filters\n    let result = [...studentTasks];\n\n    // Filter by status\n    if (taskFilters.status.length > 0) {\n      result = result.filter((task) => taskFilters.status.includes(task.status));\n    }\n\n    // Filter by date range\n    if (taskFilters.startDate) {\n      result = result.filter((task) => new Date(task.createdAt) >= taskFilters.startDate);\n    }\n    if (taskFilters.endDate) {\n      const endDate = new Date(taskFilters.endDate);\n      endDate.setDate(endDate.getDate() + 1);\n      result = result.filter((task) => new Date(task.createdAt) <= endDate);\n    }\n\n    // Filter by search term\n    if (taskFilters.searchTerm) {\n      const searchLower = taskFilters.searchTerm.toLowerCase();\n      result = result.filter(\n        (task) =>\n          task.title.toLowerCase().includes(searchLower) || task.description.toLowerCase().includes(searchLower),\n      );\n    }\n\n    // Sort results\n    result.sort((a, b) => {\n      let valueA, valueB;\n\n      if (taskFilters.sortBy === 'createdAt') {\n        valueA = new Date(a.createdAt).getTime();\n        valueB = new Date(b.createdAt).getTime();\n      } else if (taskFilters.sortBy === 'title') {\n        valueA = a.title.toLowerCase();\n        valueB = b.title.toLowerCase();\n      } else if (taskFilters.sortBy === 'status') {\n        valueA = a.status;\n        valueB = b.status;\n      } else {\n        valueA = a[taskFilters.sortBy];\n        valueB = b[taskFilters.sortBy];\n      }\n\n      return taskFilters.sortOrder === 'asc'\n        ? valueA > valueB ? 1 : valueA < valueB ? -1 : 0\n        : valueA < valueB ? 1 : valueA > valueB ? -1 : 0;\n    });\n\n    setFilteredTasks(result);\n\n    // Initialize charts\n    initializeCharts(studentTasks, studentProjects);\n  }, [tasks, taskFilters, currentUser, studentProjects]);\n\n  useEffect(() => {\n    fetchProjects();\n  }, [fetchProjects]);\n\n  useEffect(() => {\n    initializeCharts();\n  }, [initializeCharts]);\n\n  const fetchUsers = async () => {\n    try {\n      const response = await api.get('/users');\n      setUsers(response.data);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n\n  const fetchTasks = async () => {\n    try {\n      const response = await api.get('/tasks');\n      setTasks(response.data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  const fetchProjects = async () => {\n    try {\n      const response = await api.get('/projects');\n      const allProjects = response.data;\n      setProjects(allProjects);\n\n      const userProjects = allProjects.filter((project) => project.students.includes(currentUser.id));\n      setStudentProjects(userProjects);\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n    }\n  };\n\n  const initializeCharts = (studentTasks, studentProjects) => {\n    initializeStatusChart(studentTasks);\n    initializeProjectsChart(studentProjects);\n    initializeTimelineChart(studentTasks);\n  };\n\n  const initializeStatusChart = (studentTasks) => {\n    if (statusChartRef.current) {\n      if (statusChartInstance.current) {\n        statusChartInstance.current.destroy();\n      }\n\n      const pendingCount = studentTasks.filter((task) => task.status === 'pending').length;\n      const inProgressCount = studentTasks.filter((task) => task.status === 'in-progress').length;\n      const completedCount = studentTasks.filter((task) => task.status === 'completed').length;\n\n      const ctx = statusChartRef.current.getContext('2d');\n      if (ctx) {\n        statusChartInstance.current = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: ['Pending', 'In Progress', 'Completed'],\n            datasets: [\n              {\n                data: [pendingCount, inProgressCount, completedCount],\n                backgroundColor: ['rgba(255, 193, 7, 0.7)', 'rgba(13, 110, 253, 0.7)', 'rgba(40, 167, 69, 0.7)'],\n                borderColor: ['rgba(255, 193, 7, 1)', 'rgba(13, 110, 253, 1)', 'rgba(40, 167, 69, 1)'],\n                borderWidth: 1,\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: 'rgba(255, 255, 255, 0.7)',\n                },\n              },\n              title: {\n                display: true,\n                text: 'Task Status Distribution',\n                color: 'rgba(255, 255, 255, 0.9)',\n                font: {\n                  size: 16,\n                },\n              },\n            },\n          },\n        });\n      }\n    }\n  };\n\n  const initializeProjectsChart = (studentProjects) => {\n    if (projectsChartRef.current && studentProjects.length > 0) {\n      if (projectsChartInstance.current) {\n        projectsChartInstance.current.destroy();\n      }\n\n      const ctx = projectsChartRef.current.getContext('2d');\n      if (ctx) {\n        projectsChartInstance.current = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: studentProjects.map((project) => project.title),\n            datasets: [\n              {\n                label: 'Project Progress (%)',\n                data: studentProjects.map((project) => project.progress),\n                backgroundColor: studentProjects.map((project) => {\n                  if (project.status === 'completed') return 'rgba(40, 167, 69, 0.7)';\n                  if (project.status === 'in-progress') return 'rgba(13, 110, 253, 0.7)';\n                  return 'rgba(255, 193, 7, 0.7)';\n                }),\n                borderColor: studentProjects.map((project) => {\n                  if (project.status === 'completed') return 'rgba(40, 167, 69, 1)';\n                  if (project.status === 'in-progress') return 'rgba(13, 110, 253, 1)';\n                  return 'rgba(255, 193, 7, 1)';\n                }),\n                borderWidth: 1,\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                ticks: {\n                  color: 'rgba(255, 255, 255, 0.7)',\n                },\n                grid: {\n                  color: 'rgba(255, 255, 255, 0.1)',\n                },\n              },\n              x: {\n                ticks: {\n                  color: 'rgba(255, 255, 255, 0.7)',\n                  callback: function (value) {\n                    const label = this.getLabelForValue(value);\n                    if (label.length > 15) {\n                      return label.substring(0, 15) + '...';\n                    }\n                    return label;\n                  },\n                },\n                grid: {\n                  color: 'rgba(255, 255, 255, 0.1)',\n                },\n              },\n            },\n            plugins: {\n              legend: {\n                display: false,\n              },\n              title: {\n                display: true,\n                text: 'My Projects Progress',\n                color: 'rgba(255, 255, 255, 0.9)',\n                font: {\n                  size: 16,\n                },\n              },\n              tooltip: {\n                callbacks: {\n                  label: (context) => {\n                    const project = studentProjects[context.dataIndex];\n                    return [`Progress: ${context.parsed.y}%`, `Status: ${project.status}`, `Due: ${project.endDate}`];\n                  },\n                },\n              },\n            },\n          },\n        });\n      }\n    }\n  };\n\n  const initializeTimelineChart = (studentTasks) => {\n    if (timelineChartRef.current) {\n      if (timelineChartInstance.current) {\n        timelineChartInstance.current.destroy();\n      }\n\n      const tasksByMonth = {};\n      const completedByMonth = {};\n\n      const months = [];\n      const now = new Date();\n      for (let i = 5; i >= 0; i--) {\n        const month = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        const monthKey = `${month.getFullYear()}-${month.getMonth() + 1}`;\n        months.push(monthKey);\n        tasksByMonth[monthKey] = 0;\n        completedByMonth[monthKey] = 0;\n      }\n\n      studentTasks.forEach((task) => {\n        const taskDate = new Date(task.createdAt);\n        const monthKey = `${taskDate.getFullYear()}-${taskDate.getMonth() + 1}`;\n\n        if (tasksByMonth[monthKey] !== undefined) {\n          tasksByMonth[monthKey]++;\n          if (task.status === 'completed') {\n            completedByMonth[monthKey]++;\n          }\n        }\n      });\n\n      const ctx = timelineChartRef.current.getContext('2d');\n      if (ctx) {\n        timelineChartInstance.current = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: months.map((month) => {\n              const [year, monthNum] = month.split('-');\n              return `${new Date(parseInt(year), parseInt(monthNum) - 1).toLocaleString('default', {\n                month: 'short',\n              })} ${year}`;\n            }),\n            datasets: [\n              {\n                label: 'Total Tasks',\n                data: months.map((month) => tasksByMonth[month]),\n                borderColor: 'rgba(54, 162, 235, 1)',\n                backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                tension: 0.3,\n                fill: true,\n              },\n              {\n                label: 'Completed Tasks',\n                data: months.map((month) => completedByMonth[month]),\n                borderColor: 'rgba(75, 192, 192, 1)',\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                tension: 0.3,\n                fill: true,\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: 'rgba(255, 255, 255, 0.7)',\n                  precision: 0,\n                },\n                grid: {\n                  color: 'rgba(255, 255, 255, 0.1)',\n                },\n              },\n              x: {\n                ticks: {\n                  color: 'rgba(255, 255, 255, 0.7)',\n                },\n                grid: {\n                  color: 'rgba(255, 255, 255, 0.1)',\n                },\n              },\n            },\n            plugins: {\n              legend: {\n                labels: {\n                  color: 'rgba(255, 255, 255, 0.7)',\n                },\n              },\n              title: {\n                display: true,\n                text: 'Task Timeline (Last 6 Months)',\n                color: 'rgba(255, 255, 255, 0.9)',\n                font: {\n                  size: 16,\n                },\n              },\n            },\n          },\n        });\n      }\n    }\n  };\n\n  const handleUpdateTaskStatus = async (taskId, status) => {\n    try {\n      await api.put(`/tasks/${taskId}`, { status });\n      const updatedTasks = tasks.map((task) => (task.id === taskId ? { ...task, status } : task));\n      setTasks(updatedTasks);\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n\n  const getAdminName = (id) => {\n    const admin = users.find((user) => user.id === id);\n    return admin ? admin.name : 'Unknown Admin';\n  };\n\n  const getStatusBadge = (status) => {\n    const badgeColors = {\n      pending: 'bg-yellow-900/20 text-yellow-400 border-yellow-500',\n      'in-progress': 'bg-blue-900/20 text-blue-400 border-blue-500',\n      completed: 'bg-green-900/20 text-green-400 border-green-500',\n    };\n\n    return (\n      <span className={`px-2 py-1 rounded-full border text-sm ${badgeColors[status]}`}>\n        {status.replace('-', ' ')}\n      </span>\n    );\n  };\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n  };\n\n  return (\n    <DashboardLayout title=\"Student Dashboard\" userRole=\"student\">\n      <Outlet />\n    </DashboardLayout>\n  );\n};\n\nexport default StudentDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}